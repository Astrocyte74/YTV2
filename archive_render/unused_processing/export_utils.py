#!/usr/bin/env python3
"""
Export utilities for YouTube video summaries
Supports multiple output formats: Markdown, PDF, JSON, HTML
"""

import json
import markdown
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import inch

class SummaryExporter:
    def __init__(self, output_dir: str = "./exports"):
        """Initialize the exporter with output directory"""
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
    
    def _sanitize_filename(self, title: str) -> str:
        """Sanitize title for use as filename"""
        import re
        # Remove invalid characters and limit length
        sanitized = re.sub(r'[<>:"/\\|?*]', '', title)
        sanitized = sanitized.replace(' ', '_')
        return sanitized[:50]  # Limit filename length
    
    def export_to_json(self, data: Dict, filename: Optional[str] = None) -> str:
        """Export summary data to JSON format"""
        if not filename:
            title = data.get('metadata', {}).get('title', 'summary')
            filename = f"{self._sanitize_filename(title)}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        filepath = self.output_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        return str(filepath)
    
    def export_to_markdown(self, data: Dict, filename: Optional[str] = None) -> str:
        """Export summary data to Markdown format"""
        if not filename:
            title = data.get('metadata', {}).get('title', 'summary')
            filename = f"{self._sanitize_filename(title)}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        
        filepath = self.output_dir / filename
        
        # Build markdown content
        metadata = data.get('metadata', {})
        summary = data.get('summary', {})
        analysis = data.get('analysis', {})
        
        md_content = f"""# {metadata.get('title', 'YouTube Video Summary')}

## Video Information
- **Channel**: {metadata.get('uploader', 'Unknown')}
- **Duration**: {self._format_duration(metadata.get('duration', 0))}
- **Upload Date**: {metadata.get('upload_date', 'Unknown')}
- **Views**: {metadata.get('view_count', 0):,}
- **URL**: {data.get('url', 'Unknown')}

## Summary
{summary.get('headline', 'No headline available')}

{summary.get('summary', 'No summary available')}

## Content Analysis
- **Category**: {', '.join(analysis.get('category', ['Unknown']))}
- **Sentiment**: {analysis.get('sentiment', 'Unknown')}
- **Target Audience**: {analysis.get('target_audience', 'Unknown')}
- **Complexity Level**: {analysis.get('complexity_level', 'Unknown')}
- **Content Type**: {analysis.get('content_type', 'Unknown')}
- **Educational Value**: {analysis.get('educational_value', 'Unknown')}
- **Entertainment Value**: {analysis.get('entertainment_value', 'Unknown')}

### Key Topics
{', '.join(analysis.get('key_topics', ['No topics identified']))}

## Processing Information
- **Processed At**: {data.get('processed_at', 'Unknown')}
- **LLM Provider**: {data.get('processor_info', {}).get('llm_provider', 'Unknown')}
- **Model**: {data.get('processor_info', {}).get('model', 'Unknown')}

---
*Generated by YouTube Summarizer*
"""
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(md_content)
        
        return str(filepath)
    
    def export_to_html(self, data: Dict, filename: Optional[str] = None) -> str:
        """Export summary data to HTML format"""
        if not filename:
            title = data.get('metadata', {}).get('title', 'summary')
            filename = f"{self._sanitize_filename(title)}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        
        filepath = self.output_dir / filename
        
        # First create markdown, then convert to HTML
        md_content = self._create_markdown_content(data)
        html_content = markdown.markdown(md_content, extensions=['tables', 'toc'])
        
        # Wrap in full HTML document
        full_html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{data.get('metadata', {}).get('title', 'YouTube Video Summary')}</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }}
        h1, h2, h3 {{
            color: #333;
        }}
        .video-info {{
            background-color: #f5f5f5;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }}
        .analysis {{
            background-color: #e8f4f8;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }}
        .summary {{
            background-color: #fff3cd;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }}
    </style>
</head>
<body>
    {html_content}
</body>
</html>"""
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(full_html)
        
        return str(filepath)
    
    def export_to_pdf(self, data: Dict, filename: Optional[str] = None) -> str:
        """Export summary data to PDF format"""
        if not filename:
            title = data.get('metadata', {}).get('title', 'summary')
            filename = f"{self._sanitize_filename(title)}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        
        filepath = self.output_dir / filename
        
        # Create PDF document
        doc = SimpleDocTemplate(str(filepath), pagesize=letter)
        story = []
        styles = getSampleStyleSheet()
        
        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=30,
            textColor=colors.darkblue
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            textColor=colors.darkred
        )
        
        # Get data
        metadata = data.get('metadata', {})
        summary = data.get('summary', {})
        analysis = data.get('analysis', {})
        
        # Title
        story.append(Paragraph(metadata.get('title', 'YouTube Video Summary'), title_style))
        story.append(Spacer(1, 12))
        
        # Video Information
        story.append(Paragraph('Video Information', heading_style))
        video_info = [
            ['Channel:', metadata.get('uploader', 'Unknown')],
            ['Duration:', self._format_duration(metadata.get('duration', 0))],
            ['Upload Date:', metadata.get('upload_date', 'Unknown')],
            ['Views:', f"{metadata.get('view_count', 0):,}"],
            ['URL:', data.get('url', 'Unknown')]
        ]
        
        info_table = Table(video_info, colWidths=[1.5*inch, 4*inch])
        info_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ]))
        story.append(info_table)
        story.append(Spacer(1, 20))
        
        # Summary
        story.append(Paragraph('Summary', heading_style))
        story.append(Paragraph(summary.get('headline', 'No headline available'), styles['Heading3']))
        story.append(Spacer(1, 12))
        
        summary_text = summary.get('summary', 'No summary available')
        # Split long text into paragraphs
        for paragraph in summary_text.split('\n\n'):
            if paragraph.strip():
                story.append(Paragraph(paragraph.strip(), styles['Normal']))
                story.append(Spacer(1, 6))
        
        story.append(Spacer(1, 20))
        
        # Content Analysis
        story.append(Paragraph('Content Analysis', heading_style))
        analysis_info = [
            ['Category:', ', '.join(analysis.get('category', ['Unknown']))],
            ['Sentiment:', analysis.get('sentiment', 'Unknown')],
            ['Target Audience:', analysis.get('target_audience', 'Unknown')],
            ['Complexity Level:', analysis.get('complexity_level', 'Unknown')],
            ['Content Type:', analysis.get('content_type', 'Unknown')],
            ['Educational Value:', analysis.get('educational_value', 'Unknown')],
            ['Entertainment Value:', analysis.get('entertainment_value', 'Unknown')],
            ['Key Topics:', ', '.join(analysis.get('key_topics', ['No topics identified']))]
        ]
        
        analysis_table = Table(analysis_info, colWidths=[1.5*inch, 4*inch])
        analysis_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ]))
        story.append(analysis_table)
        story.append(Spacer(1, 20))
        
        # Processing info
        story.append(Paragraph('Processing Information', heading_style))
        story.append(Paragraph(f"Processed: {data.get('processed_at', 'Unknown')}", styles['Normal']))
        story.append(Paragraph(f"Generated by YouTube Summarizer using {data.get('processor_info', {}).get('llm_provider', 'Unknown')}", styles['Italic']))
        
        # Build PDF
        doc.build(story)
        return str(filepath)
    
    def _create_markdown_content(self, data: Dict) -> str:
        """Helper method to create markdown content"""
        metadata = data.get('metadata', {})
        summary = data.get('summary', {})
        analysis = data.get('analysis', {})
        
        return f"""# {metadata.get('title', 'YouTube Video Summary')}

## Video Information
- **Channel**: {metadata.get('uploader', 'Unknown')}
- **Duration**: {self._format_duration(metadata.get('duration', 0))}
- **Upload Date**: {metadata.get('upload_date', 'Unknown')}
- **Views**: {metadata.get('view_count', 0):,}
- **URL**: {data.get('url', 'Unknown')}

## Summary
{summary.get('headline', 'No headline available')}

{summary.get('summary', 'No summary available')}

## Content Analysis
- **Category**: {', '.join(analysis.get('category', ['Unknown']))}
- **Sentiment**: {analysis.get('sentiment', 'Unknown')}
- **Target Audience**: {analysis.get('target_audience', 'Unknown')}
- **Complexity Level**: {analysis.get('complexity_level', 'Unknown')}
- **Content Type**: {analysis.get('content_type', 'Unknown')}
- **Educational Value**: {analysis.get('educational_value', 'Unknown')}
- **Entertainment Value**: {analysis.get('entertainment_value', 'Unknown')}

### Key Topics
{', '.join(analysis.get('key_topics', ['No topics identified']))}

---
*Generated by YouTube Summarizer at {data.get('processed_at', 'Unknown')}*
"""
    
    def _format_duration(self, seconds: int) -> str:
        """Format duration from seconds to readable format"""
        if seconds < 60:
            return f"{seconds}s"
        elif seconds < 3600:
            minutes = seconds // 60
            remaining_seconds = seconds % 60
            return f"{minutes}m {remaining_seconds}s"
        else:
            hours = seconds // 3600
            remaining_minutes = (seconds % 3600) // 60
            remaining_seconds = seconds % 60
            return f"{hours}h {remaining_minutes}m {remaining_seconds}s"
    
    def export_all_formats(self, data: Dict, base_filename: Optional[str] = None) -> Dict[str, str]:
        """Export to all supported formats
        
        Returns:
            Dictionary with format names as keys and file paths as values
        """
        exported_files = {}
        
        try:
            exported_files['json'] = self.export_to_json(data, 
                f"{base_filename}.json" if base_filename else None)
        except Exception as e:
            exported_files['json'] = f"Error: {str(e)}"
        
        try:
            exported_files['markdown'] = self.export_to_markdown(data, 
                f"{base_filename}.md" if base_filename else None)
        except Exception as e:
            exported_files['markdown'] = f"Error: {str(e)}"
        
        try:
            exported_files['html'] = self.export_to_html(data, 
                f"{base_filename}.html" if base_filename else None)
        except Exception as e:
            exported_files['html'] = f"Error: {str(e)}"
        
        try:
            exported_files['pdf'] = self.export_to_pdf(data, 
                f"{base_filename}.pdf" if base_filename else None)
        except Exception as e:
            exported_files['pdf'] = f"Error: {str(e)}"
        
        return exported_files


# Example usage
async def export_example():
    """Example of how to use the exporter"""
    
    # Sample data structure (would come from YouTubeSummarizer)
    sample_data = {
        'url': 'https://www.youtube.com/watch?v=example',
        'metadata': {
            'title': 'How to Build Amazing Things with AI',
            'uploader': 'Tech Channel',
            'duration': 1200,
            'upload_date': '20240115',
            'view_count': 50000
        },
        'summary': {
            'headline': 'This video explains how to build AI applications using modern tools and frameworks.',
            'summary': 'A comprehensive guide covering the fundamentals of AI development, including practical examples and best practices for building production-ready applications.',
            'summary_type': 'comprehensive'
        },
        'analysis': {
            'category': ['Technology', 'Education'],
            'sentiment': 'Positive',
            'target_audience': 'Developers and AI enthusiasts',
            'complexity_level': 'Intermediate',
            'key_topics': ['AI', 'Development', 'Programming', 'Machine Learning'],
            'content_type': 'Tutorial',
            'educational_value': 'High',
            'entertainment_value': 'Medium'
        },
        'processed_at': datetime.now().isoformat()
    }
    
    # Create exporter and export to all formats
    exporter = SummaryExporter()
    files = exporter.export_all_formats(sample_data, "ai_tutorial_example")
    
    print("Exported files:")
    for format_name, filepath in files.items():
        print(f"  {format_name}: {filepath}")


if __name__ == "__main__":
    import asyncio
    asyncio.run(export_example())